Part 0
Fundamentals of Web Apps

Part A
-single page applications
-React
-supporting RESTful
-GraphQL web services
-Node.js

Part B
Chrome Developer tab
MacOS           FN + F12 or Opt + CMD + i
Windows/Linux   FN + F12 Ctrl-Shift-i

HTTP GET
how the server and the web browser communicate with each other using the HTTP protocol

Event handlers and Callback functions
event handlers are called callback functions, the runtime environment (the browser) and invokes the functions at an appropriate time (when the event has occurred)

Single-page application (SPA) comprise of only one HTML page fetched from the server, the contents of which are manipulated with JavaScript that executes in the browser.

Installing
Part 0 A - Before you start
Need:
-Chrome Browser
-Visual Studio Code
-Node.js (will also need npm and npx, but they come with Node.js)
nvm install allows you to easily switch between versions
https://github.com/nvm-sh/nvm#installing-and-updating


Part 1
Introduction to React

Part A
Introduction to React

use Vite to create a React App

$ npm create vite@latest appName -- --template react
$ cd appName
$ npm install
$ npm run dev

props: passing data to components
1.) define the component
const Hello = (props) => {
    return (
        <div>
            <p>Hello {props.name}</p>
        </div>
    )
}
the function defining the component has a parameter props, receives an object

2.) in the main App
const App = () => {
    return (
        <div>
            <h1>Greetings</h1>
            <Hello name='Bob' />
            <Hello name='Sam' />
        </div>
    )
}

the first letter of React component names must be capitalized, otherwise it won't render to the webpage

Objects are not valid as a React child, you cannot render objects and the website will fail
<p>{myObject[0].myProperty}</p>



Part B
JavaScript

Function declaration
function product(a, b) {
    return a * b;
}
const result = product(2, 6);

Function expression
const product = function(a, b) {
    return a * b;
}
const result = average(2, 5);

Good JavaScript resources
https://developer.mozilla.org/en-US/docs/Web/JavaScript

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_overview

https://github.com/getify/You-Dont-Know-JS

https://javascript.info/

https://eloquentjavascript.net/

https://www.youtube.com/playlist?list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP

https://egghead.io/



Part C
Component state, event handlers

do not have to assign entire props object into a variable
const Hello = (props) => {
    const { name, age } = props;
}

Can assign the value of the properties directly to variables
const Hello = ({name, age}) => {
    ...
}

Using state
Stateful component

using State
import { useState } from 'react';

const App = () => {
    const [counter, setCounter] = useState(0);
    setTimeout( () => setCounter(counter + 1), 1000);

    return (
        <div>{ counter }<div>
    )
}

Event Handling

// this is for simple event handlers
const App = () => {
   const [counter, setCounter] = useState(0);

    return (
    <div>
      <div>{ counter }</div>
      <button onClick={() => setCounter(counter + 1)}>Plus</button>
      <button onClick={() => setCounter(0)}>Zero</button>
    </div>
  )

// but in real life this is much more realistic
const App = () => {
  const [counter, setCounter] = useState(0);

  const increaseByOne = () => setCounter(counter + 1);
  const setToZero = () => setCounter(0);


  return (
    <div>
      <div>{ counter }</div>
      <button onClick={increaseByOne}>Plus</button>
      <button onClick={setToZero}>Zero</button>
    </div>
  )
}

Passing state - to child components

const Button = (props) => {
  return (
    <button onClick={props.onClick}>{props.text}</button>
  )
}

const App = () => {

  const increaseByOne = () => setCounter(counter + 1);
  const decreaseByOne = () => setCounter(counter - 1);
  const setToZero = () => setCounter(0);

  return (
    <div>
      <Button onClick={increaseByOne} text='plus' />
      <Button onClick={setToZero} text='zero' />
      <Button onClick={decreaseByOne} text='decrease' />
    </div>
  )
}

Changes in state cause re-rendering
calling a function that changes the state causes the component to re-render

when the application starts, code in App is executed, the event handler changes the state of the App counter with any state in it



Part D
A more complex state, debugging React apps

changing state has to be done by setting the state to a new object

Conditional rendering: a components renders completely different React elements depending on the state of the application

React hooks, like useEffect, can only be called inside a function

event handler is not a function, but a variable assignment
this is allowed
<button onClick={() => console.log('clicked the button')}>Click me</button>

https://egghead.io/



Part 2
Rendering a collection, modules

Part A
Rendering a collection, modules

React requires a key-value pair for rendering lists
{myList.map(x =>
    <li key={note.id}>
        {note.content}
    </li>
)}

React uses key attributes of objects in an array to determine how to update the view generated by a componenet when the component is re-rendered



Part B
Forms

Accessing data contained in the form's input element

Controlled component
we assigned a piece of the App component's state as the value attribute of the input element, the App component now controls the behavior of the input element

display results of an input event onto the screen

const [newNote, setNewNote] = useState('a new note...');

const handleNoteChange = (event) => {
    console.log(event.target.value);
    setNewNote(event.target.value);
}

<form onSubmit={addNote}>
    <input value={newNote} onChange={handleNoteChange} />
    <button type='submit'>Save</button>
</form>

target property refers to the controlled input element
event.target.value refers to the input value of that element

Create a new copy of the array with the new items added to the end, must never mutate state directly in React

Filtering Displayed Elements



Part C
Getting data from server

Can use JSON Server
$ npm install -g json-server

Or as an development only package
$ npm install json-server --save-dev

running JSON server on a different port
if you install JSON Server globally
$ json-server --port 3001 --watch db.json

using npx
$ npx json-server --port 3001 --watch db.json

setting a script command
"scripts": {
    "server": "json-server -p3001 --watch db.json"
}

course will use Axios
$ npm install axios

Axios and promises

A promise is an object that can have 3 diistinct states:
1.) Pending
2.) Fulfilled
3.) Rejected

If we want to access the result of the operation represented by the promise, must register an event handler to the promise, using then()

const promise = axios.get('http://localhost:3001/notes');
promise.then(response => {
  console.log(response);
});

the JavaScript runtime environment calls the callback function registered by then() providing it with a response object as a parameter
the response object contains all the essential data related to the response of an HTTP GET request, which would include the returned data, status code and headers

Effect-hooks
effect-hooks: allow a component to connect and synchronize with external systems, the right tool to fetch data from a server

//example
const hook = () => {
console.log('effect');
axios
    .get('http://localhost:3001/notes')
    .then(response => {
    console.log('promise fulfilled');
    setNotes(response.data);
    })
}
useEffect(hook, []);

useEffect() takes 2 parameters:
1.) the function, the effect itself
2.) how often the effect is run, [] means run only once along with the first render of the component

by default effects run after every completed render, but you can choose to fire it only when certain values have changed



Part D
Altering data in server

resources: data objects, and every resource has a unique address associated with it, a URL























































































































































































































































































































































































































































