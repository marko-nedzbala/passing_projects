
Started Sunday March 16, 2025 at 7:32 PM



PART I - THE SAFE ALTERNATIVES
Chapter01
JavaScript Gotchas

JavaScript has Automatic SemiColon Insertion (ASI) rules

ESLint
$ npm install -g eslint
$ eslint --init

$ npm install eslint
$ eslint --init

to use: $ eslint myfile.js



Chapter02
Variables and Constants

const sam = Object.freeze({ first: 'Sam', age: 2 });
sam.age = 3;
console.log(sam);

// this will freeze our object, but only a shallow freeze



Chapter03
Working with Function Arguments

the rest parameter: the receiving end of a function
gather discrete values into an array
const myFunction = function(...values) { //code }

the spread operator: the calling side of the function
breaks a collection into discrete values
myFunction(...myArray);





PART II - NICE ADDITIONS
Chapter04
Iterators and Symbols

looping
for elements, a collection
for(const item of my_array) {
    // code
}

Getting the index
for(const entry of names.entries()) {
    console.log(entry);
}

or also getting the index, values
for(const [i, name] of names.entries()) {
    console.log(i + '--' + name);
}

Symbol
is not visible during an iteration

Custom Iterators and Generators

custom iterator for a class

class CardDeck {
    constructor() {
        this.suitShapes = ['Clubs', 'Diamonds', 'Hearts', 'Spaces'];
    }
    [Symbol.iterator]() {
        let index = -1;
        const self = this;
        return {
            next() {
                index++;
                return {
                    done: index >= self.suitShapes.length, value: self.suitShapes[index]
                };
            }
        };
    }
}

better to use a generator

Yield statement

class CardDeck {
    constructor() {
        this.suitShapes = ['Clubs', 'Diamonds', 'Hearts', 'Spaces'];
    }
    *[Symbol.iterator]() {
        for(const shape of this.suitShapes) {
            yield shape;
        }
    }
}
const deck = new CardDeck();
for (const card of deck) {
    console.log(card);
}

Generators

this allows us to have multile generators

class CardDeck {
    constructor() {
        this.suitShapes = ['Clubs', 'Diamonds', 'Hearts', 'Spaces'];
    }
    *suits() {
        for(const shape of this.suitShapes) {
            yield shape;
        }
    }
}
const deck = new CardDeck();
for (const card of deck.suits()) {
    console.log(card);
}



Chapter05
Arrow Functions and Functional Style

lexical scoping: the variable may come from the scope where the function using the variable is defined
dynamic scoping: the variable may be provided by the caller of the function
JavaScript does both (which is rare)

anonymous functions: JS scopes all non-parameter, non-local variables to lexical scope, except for this, arguments
arrow functions: JS has consistent lexical scoping for all non-parameter, non-local variables



Chapter06
Literals and Destructuring





PART III - OO AND MODULAR CODE
Chapter07
Working with Classes

const mine = 'mine';
class Car {
    constructor(year) {
        this.year = year;
        // computed fields
        this[mine] = 'mine';
    }
    // methods
    drive(distance) {
        this.miles += distance;
    }
    //properties
    get age() {
        return new Date().getFullYear() - this.year;
    }
    //class members, members associated with the class
    static myStatic() {...}
}

class expressions
useful to create dynamic classes at runtime



Chapter08
Using Inheritance

prototypal inheritance
uses an object chain to delegate calls

Reflect.getPrototypeOf(myClass);



Chapter09
Using Modules

Exporting modules
inlining exports:                   export myFunction() {...}
exporting explicitly:               export { myFunction, myFunction2 };
exporting with a different name:    export { myFunction as my };
default exports, can only have on:  export default myFunction() {...}
re-export:                          export * from './myFile';

Importing modules
import { theNameInFile } from './myFile';
import { theNameInFile as aNewName } from './myFile';
import * as home from './myFile';





PART IV - GOING META
Chapter10
Keeping Your Promises

const computeSqrtAsync = function(number) {
    if(number < 0) {
        return Promise.reject('no negative number please');
    }
    if (number === 0) {
        return Promise.resolve(0);
    }
    return new Promise(function(resolve, reject) {
        setTimeout(() => resolve(Math.sqrt(number)), 1000);
    });
};

const reportOnPromise = function(promise) {
    promise
        .then(result => console.log(`result is ${result}.`))
        .catch(error => console.log(`ERROR: ${error}`));
};

const forNegative1 = computeSqrtAsync(-1);
const forZero = computeSqrtAsync(0);
const forSixteen = computeSqrtAsync(10);

reportOnPromise(forNegative1);
reportOnPromise(forZero);
reportOnPromise(forSixteen);

Chaining Promises








Chapter11
Exploring Metaprogramming

Chapter12
Deep Dive into Metaprogramming




































































