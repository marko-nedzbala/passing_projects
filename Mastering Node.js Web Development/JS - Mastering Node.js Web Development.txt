
https://github.com/PacktPublishing/Mastering-Node.js-Web-Development

npm install @types/node --save-dev

Load developer tools Chrome
alt + command + i

Format
Linux: ctrl + shift + i


PART I - PUTTING NODE.JS IN CONTEXT
Chapter01
Getting Ready

Chapter02
Woring with the Node.js Tools

NPM commands
npm init        creates a package.json, keeps track of a project's packages
npm install     adds a package to the package, --save-dev for packages during development, not part of the app
npm list        lists all the packages part of the project, --all includes dependencies
npm audit       reports security vulnerabilities that have reported
npm start       executes the start script in package.json
npm stop        executes the stop script in package.json
npm restart     executes the restart script in package.json
npm test        executes the test script in package.json
npm run         executes custom commands in package.json
npx             executes a package

Versioning
$ npm confiig set save-exact false

Name    Description
*                   accepts any version of the package to be installed
5.3.0               will accept only the package with exact matching version number
>5.3.0 or >=5.3.0   any version of the package that is greater or equal to a given version
<5.3.0 or <=5.3.0   any version of the package that is less then or equal to a given version
~5.3.0              versions even if the patch level number (the last 3rd number) doesn't match
                    so ~5.3.0 will accept version 5.3.1 or 5.3.2, not 5.4.0
^5.3.0              version if the minor replease number (the 2nd number) doesn't match
                    so ^5.4.0 to 5.5.0, but not 6.0.0

Custom commands
"scripts": {
    "go": "tsc message.ts && node message.js"
}

commands separated by:
    && are executed sequentially
    & are executed in parallel



Chapter03
JavaScript and TypeScript Primer

Development tools to install
$ npm install nodemon@2.0.20
$ npm install tsc-watch@6.0.4
$ npm install typescript@5.2.2
$ npm install @tsconfig/node20@20.1.4
$ npm install @tsconfig/node20@20.1.4

$ npm install @types/node --save-dev

Every value is truthy except: false 0 -0 "" null undefined NaN

Nullish coalescing operators
//looks only for null or undefined values
let coalesced1 = val1 ?? 'fallback value';

Optional chaining operators
need to guard against null or undefined values before they can used
count?.propertyName;

Optional parameter
function myFunc(val?) {...}
val?

Module resolution
relative module: import { Name, WeatherLocation } from './modules';
nonrelative module, uses node_modules: import { express } from 'express';



Chapter04
Understanding Node.js Concurrency

create a TS JSON file
tsconfig.json

{
    "extends": "@tsconfig/node20/tsconfig.json",
    "compilerOptions": {
        "rootDir": "src",
        "outDir": "dist",
    }
}

package.json
"scripts": {
    "start": "tsc-watch --onsuccess \"node dist/server.js\""
},

Multi-thread execution
1.) new HTTP request arrives
2.) request gets added to the queue, it waits until one of threads is avaiable to process it
3.) thread processes the request
4.) sends the response back to the client
5.) returns to the queue for the next request

non-blocking and asynchronous are from the perspective of the handler thread, the handler thread can do other work during the waiting period

Node.js uses native threads, the worker pool, to perform options asynchronously

events: provide notifications that the state of the application has changed and provide an opportunity to execute a callback function to handle

const data: Buffer = await readFile('data.json');
// example of a callback
res.end(data, () => console.log('File sent'));

Node.js APIs to allow promises and callbacks to be mixed
promisify: this function creates a Promise from a function that accepts a conventional callback
callbackify: this function accepts a Promise object and returns a function that will accept a conventional callback

__filename: the file name of the current module
__dirname: name of the directory that contains the current module



Chapter05
Handling HTTP Requests

Listening for HTTP requests
createServer() in the http module is used to create Server objects that can be used to listen for and process HTTP requests
useful server methods/properties
    listen(port)
    close()
    requestTimeout

useful server events
    listening
    request
    error

createServer() takes 2 arguments:
1.) configuration object
    IncomingMessage property: specifies the class use to represent requests
    ServerResponse property: specifies the class use to represent response
    requestTimeout: specifies the amount of time, MS, allowed for a client to send requests, default is 300K MS
2.) request-handling function
    invoked when an HTTP request has been received
// omits the configuration object, the default types will be used to represent
export const handler = async (req: IncomingMessage, resp: ServerResponse) => {
    resp.end('Hello world');
};

HTTP requests
has 4 parts:
1.) HTTP method: describes the operation the client wants to perform
2.) URL: identifies the resource the request should be applied to
3.) Headers: provide additional information about the request and the capabilities of the client
4.) Request body: provides the data required for the requested operation

export const handler = async (req: IncomingMessage, resp: ServerResponse) => {
    console.log(`---- HTTP Method: ${req.method}, URL: ${req.url}`);
    console.log(`host: ${req.headers.host}`);
    console.log(`accept: ${req.headers.accept}`);
    console.log(`user-agent: ${req.headers['user-agent']}`);

    resp.end('Hello world');
};

Parsing URLs
URL properties
hostname        returns a string containing the URL hostname component
pathname        returns a string containing the URL pathname component
port            returns a string containing the URL port componenet, will be empty if the request uses the default
                such as port 80
protocol        returns a string containing the URL protocol component
search          returns a string containing the entire query portion of the URL
searchParams    returns URLSearchParams objects that provides key/value access to the query portion of the URL

import { URL } from 'url';
export const handler = async (req: IncomingMessage, resp: ServerResponse) => {

    const parsedURL = new URL(req.url ?? '', `http://${req.headers.host}`);
    console.log(`protocol: ${parsedURL.protocol}`);
    console.log(`hostname: ${parsedURL.hostname}`);
    console.log(`port: ${parsedURL.port}`);
    console.log(`pathname: ${parsedURL.pathname}`);
    parsedURL.searchParams.forEach((val, key) => {
        console.log(`Search param: ${key}: ${val}`);
    });

    resp.end('Hello world');
};

HTTP responses
https://nodejs.org/api/http.html

From now on, he lists these parts out, feels like I'm rewriting documentation

HTTPS Requests
https://letsencrypt.org

self-signed certificate
page 147 to page 153

Installing Express package
$ npm install express@4.18.2
$ npm install --save-dev @types/express4.17.20

Express router
separates request matching from generating response



Chapter06
Using Node.js Streams

Streams:
1.) a sequence of data values: data arrives in the same order it was written
2.) data values can be written over time, so the writer doesn't have to have all the data ready before the first value is written

APIs
Writable
Readable

Data buffering
flushed the data: each time the stream processes a chunck of data
drained: the stream buffer is drained when all the data in the stream's buffer has been processed
high-water mark: the amount of data that can be stored in the buffer

the ideal approach is to write data to a stream until its buffer is full and then wait until that data is flushed before further data is written, write() returns a boolean value that indicates whether the stream can receive more data without expanding its buffer beyond its target high-water mark

//this will notify us when the buffer is full
for (let i = 0; i < 10_000; i++) {
    if(resp.write(`Message: ${i}\n`)) {
        // resp.write(`Message: ${i}\n`);
        console.log('Stream buffer is at capacity');
    }
}

//avoid excessive data buffering
export const basicHandler = (req: IncomingMessage, resp: ServerResponse) => {

    resp.setHeader('Content-Type', 'text/plain');

    let i = 0;
    let canWrite = true;

    const writeData = () => {
        console.log('Started writing data');
        do {
            canWrite = resp.write(`Message: ${i++}\n`);
        } while ( i < 10_000 && canWrite);
        console.log('Stream buffer is at capacity');
        if (i < 10_000) {
            resp.once('drain', () => {
                console.log('Buffer has been drained');
                writeData();
            });
        } else {
            resp.end('End');
        }
    }
    writeData();
};

Transforming data
Transform class is used to create objects, known transformers, that receive data from a Readable stream, process it in some way and then pass it on, applied with the pipe method

middleware components: request handlers that can ispect and intercept all the HTTP requests the server receives



Chapter07
Using Bundles And Content Security

Modern web development requires 3 key componenets:
1.) the backend server
2.) the client-side application
3.) the browser

Bundlers
$ npm install --save-dev webpack@5.89.0
$ npm install --save-dev webpack-cli@5.1.4
$ npm install --save-dev npm-run-all@4.1.5

creating stand-alone bundles
configure webpack, add a file
webpack.config.mjs

import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

export default {
    mode: 'development',
    entry: './static/client.js',
    output: {
        path: path.resolve(__dirname, 'dist/client'),
        filename: 'bundle.js'
    }
};

index.html
<script src="bundle.js"></script>

server.ts
expressApp.use(express.static('dist/client'));

Install the webpack development HTTP Server
$ npm install --save-dev webpack-dev-server@4.15.1

there are headers that the backend server can set to provide the browser with insight into how the application works and what behaviors are expected
the most important header is Content Security Policy (CSP), tells the browser what behaviors to expect from the client-side application so that the browser can block suspicious activity
intends to prevent Cross-Site Scripting (XSS)

define a content security policy
expressApp.use((req, resp, next) => {
    resp.setHeader('Content-Security-Policy', "img-src, 'self'");
});
middleware component

list of policies
https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy

Use a packae to set the policy header
$ npm install helmet@7.1.0

import helmet from "helmet";

expressApp.use(helmet({
    contentSecurityPolicy: {
        directives: {
            imgSrc: "'self'",
            scriptSrcAttr: "'none'",
            scriptSrc: "'self'",
            connectSrc: "'self' ws://localhost:5000"
        }
    }
}));



Chapter08
Unit Testing And Debugging

writing unit tests
arrange/act/assert (A/A/A)
Arrange: setting up the conditions for the test
Act: performing the test
Assert: verifying that the result was the one that was expected





PART II - NODE.JS IN DETAIL
Chapter09
Creating The Example Project

Application packages

npm install bootstrap@5.3.2
npm install express@4.18.2
npm install helmet@7.1.0
npm install http-proxy@1.18.1

Development tool packages

npm install --save-dev @tsconfig/node20
npm install --save-dev npm-run-all@4.1.5
npm install --save-dev tsc-watch@6.0.4
npm install --save-dev typescript@5.2.2
npm install --save-dev webpack@5.89.0
npm install --save-dev webpack-cli@5.1.4
npm install --save-dev webpack-dev-server@4.15.1

Type packages

npm install --save-dev @types/express@4.17.20
npm install --save-dev @types/node@20.6.1

Use this chapter as the basis for future ones



Chapter10
Using HTML Templates

Server-side HTML templates
three things are required for an HTML template:
1.) a template file that has placeholder sections into which dynamic content will be inserted
2.) a data dictionary (context): that provides the values that will determine the specific dynamic content that will be generated
3.) a template engine: that processes the view and the dictionary to produce an HTML document into which dynamic content has been inserted and which can be used as a response to an HTTP request

rendering: the task of processing a template, occurs entirely in the backend server. Rendering produces a regular HTML document that from the browser perspective appears no different from regular static content

Creating a simple template engine
Page 281

Server-Side Rendering (SSR)
templates are rendered at the server to create a round-trip version of the application, which can be displayed quickly by the browser, once the server-rendered content is displayed, the browser requests JavaScript code and transitions to a single-page application

Package for server-side templates
$ npm install handlebars@4.7.8
$ npm install express-handlebars@7.1.2

import { engine } from "express-handlebars";
import * as helpers from "./template_helpers";

expressApp.set("views", "templates/server");
expressApp.engine("handlebars", engine());
expressApp.set("view engine", "handlebars");

Pakcage for client-side templates
$ npm install --save-dev handlebars-loader@1.7.3

Need to add this to our webpack file (or just reference it page 306)
found the information here on webpack
https://webpack.js.org/loaders/#transpiling

module: {
    rules: [
        { test: /\.handlebars$/, loader: "handlebars-loader" }
    ]
},
    resolve: {
        alias: {
            "@templates": path.resolve(__dirname, "templates/client")
    }
}



Chapter11
Handling Form Data

action attribute element on the form element tells the browser to send the form data to /form
action="/form"

GET request, Express decodes URL query string and presents them through the Request.query property
GET requests must be idempotent: every request for a given URL should always have the same effect and always return the same result

POST requests for forms
Node.js and Express read the headers from the HTTP request and leave the body so that is can be read as a stream

name01=value01+value01&name02=value02
name=Alice+Smith&city=London

use middleware to decode the Content-Type header and form data into key/value map
app.use(express.urlencoded({extender: true}));
true is for the fact we will process more complex types

application/x-www-form-urlencoded   format is the default and works well for gathering basic data values from a user
multipart/form-data                 format is for files, allows for a mix of data types

<button class="btn btn-primary" formmethod="post">Submit (POST)</button>
<button class="btn btn-primary" formmethod="post" formenctype="multipart/form-data">Submit (POST/MIME)</button>

hard to determine if a form has multipart/form-data, many non-compliant implementations
use Multer package
$ npm install multer@1.4.5-lts.1
$ npm install --save-dev @types/multer@1.4.11

Multer package is applied to specific routes to prevent malicious users from uploading files on routes where they are not expected

the name attribute from the HTML element should match where Multer looks for the package

fileMiddleware.single('datafile')
<input type="file" name="datafile" city class="form-control" />

Sanitize data
most template packages will sanitize data

https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html

Validating form data
your logic should only act unpon what the app considers valid data types

Create a custom validator
pages 338 to page 347

Package for validation

$ npm install validator@13.11.0
$ npm install --save-dev @types/validator@13.11.5

https://github.com/validatorjs/validator.js



Chapter12
Using Databases

$ npm install sqlite3@5.1.6

Steps
1.) Create a repository layer
2.) Implementing the repository
3.) Querying the database


Create a repository layer
a layer of code that isolates the database from the rest of the application, makes it easier to change the way that data is read and awritten without needing to change the code that uses that data

named paramters: ${endSql}

ORM package
$ npm install sequelize@6.35.1

Sequelize
1.) create the model classes
2.) Initializing the data model
3.) Configuring the model relationships
4.) Define the seed data
5.) Converting data models to flat objects

Really good chapter for reviewing when you actually build something



Chapter13
Using Sessions


















LEFT OFF PAGE 352
















Chapter14
Creating RESTful Web Services

Chapter15
Authenticating And Authorizing Requests


PART III - SPORTSSTORE
Chapter16
SportsStore: A Real Application

Chapter17
SportsStore: Navigation And Cart

Chapter18
SportsStore: Orders And Validation

Chapter19
SportsStore: Authentication

Chapter20
SportsStore: Administration

Chapter21
SportsStore: Deployment































































